// Copyright (c) Strange Loop Games. All rights reserved.
// See LICENSE file in the project root for full license information.
// <auto-generated />


     using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using Eco.Core.Items;
    using Eco.Gameplay.Blocks;
    using Eco.Gameplay.Components;
    using Eco.Gameplay.Components.Auth;
    using Eco.Gameplay.DynamicValues;
    using Eco.Gameplay.Economy;
    using Eco.Gameplay.Housing;
    using Eco.Gameplay.Interactions;
    using Eco.Gameplay.Items;
    using Eco.Gameplay.Modules;
    using Eco.Gameplay.Minimap;
    using Eco.Gameplay.Objects;
    using Eco.Gameplay.Players;
    using Eco.Gameplay.Property;
    using Eco.Gameplay.Skills;
    using Eco.Gameplay.Systems.TextLinks;
    using Eco.Gameplay.Pipes.LiquidComponents;
    using Eco.Gameplay.Pipes.Gases;
    using Eco.Gameplay.Systems.Tooltip;
    using Eco.Shared;
    using Eco.Shared.Math;
    using Eco.Shared.Localization;
    using Eco.Shared.Serialization;
    using Eco.Shared.Utils;
    using Eco.Shared.View;
    using Eco.Shared.Items;
    using Eco.Gameplay.Pipes;
    using Eco.Mods.TechTree;
    using Eco.World.Blocks;
    using Eco.Gameplay.Housing.PropertyValues;
    using static Eco.Gameplay.Housing.PropertyValues.HomeFurnishingValue;
    using Eco.Core.Controller;

namespace NyElectrics {

    [Serialized]
    [RequireComponent(typeof(AirPollutionComponent))]
    [RequireComponent(typeof(OnOffComponent))]
    [RequireComponent(typeof(ChimneyComponent))]
    [RequireComponent(typeof(LiquidProducerComponent))]
    [RequireComponent(typeof(AttachmentComponent))]
    [RequireComponent(typeof(PropertyAuthComponent))]
    [RequireComponent(typeof(MinimapComponent))]
    [RequireComponent(typeof(LinkComponent))]
    [RequireComponent(typeof(CraftingComponent))]
    [RequireComponent(typeof(PowerGridComponent))]
    [RequireComponent(typeof(PowerConsumptionComponent))]
    [RequireComponent(typeof(HousingComponent))]
    [RequireComponent(typeof(LiquidConverterComponent))]
    [RequireComponent(typeof(PluginModulesComponent))]
    [RequireComponent(typeof(SolidAttachedSurfaceRequirementComponent))]
    public partial class NyElectricBlastFurnaceObject :
        WorldObject,
        IRepresentsItem
    {
        public override LocString DisplayName { get { return Localizer.DoStr("Electric Blast Furnace"); } }

        public override TableTextureMode TableTexture => TableTextureMode.Metal;

        public virtual Type RepresentedItemType { get { return typeof(NyElectricBlastFurnaceItem); } }


        protected override void Initialize()
        {

            this.GetComponent<MinimapComponent>().Initialize(Localizer.DoStr("Crafting"));
            this.GetComponent<PowerGridComponent>().Initialize(10, new ElectricPower());
            this.GetComponent<PowerConsumptionComponent>().Initialize(3000f);
           this.GetComponent<HousingComponent>().HomeValue = NyElectricBlastFurnaceItem.homeValue;

            this.GetComponent<LiquidProducerComponent>().Setup(typeof(SmogItem), 1, this.GetOccupancyType(BlockOccupancyType.ChimneyOut));
            this.GetComponent<AirPollutionComponent>().Initialize(this.GetComponent<LiquidProducerComponent>());
            this.GetComponent<LiquidConverterComponent>().Setup(typeof(WaterItem), typeof(SewageItem), this.GetOccupancyType(BlockOccupancyType.WaterInputPort), this.GetOccupancyType(BlockOccupancyType.SewageOutputPort), 0.3f, 0.9f);
        }

        public override void Destroy()
        {
            base.Destroy();
        }

        static NyElectricBlastFurnaceObject()
        {
            WorldObject.AddOccupancy<NyElectricBlastFurnaceObject>(new List<BlockOccupancy>() { new BlockOccupancy(new Vector3i(1, 4, 1), typeof(PipeSlotBlock), new Quaternion(-0.7071071f, 2.634177E-07f, 2.634179E-07f, 0.7071065f), BlockOccupancyType.ChimneyOut), new BlockOccupancy(new Vector3i(2, 0, 2), typeof(PipeSlotBlock), new Quaternion(0f, 0f, 0f, 1f), BlockOccupancyType.WaterInputPort), new BlockOccupancy(new Vector3i(0, 0, 0), typeof(PipeSlotBlock), new Quaternion(0f, -0.7071068f, 0f, 0.7071068f), BlockOccupancyType.SewageOutputPort), new BlockOccupancy(new Vector3i(0, 0, 1)), new BlockOccupancy(new Vector3i(0, 0, 2)), new BlockOccupancy(new Vector3i(0, 1, 0)), new BlockOccupancy(new Vector3i(0, 1, 1)), new BlockOccupancy(new Vector3i(0, 1, 2)), new BlockOccupancy(new Vector3i(0, 2, 0)), new BlockOccupancy(new Vector3i(0, 2, 1)), new BlockOccupancy(new Vector3i(0, 2, 2)), new BlockOccupancy(new Vector3i(0, 3, 0)), new BlockOccupancy(new Vector3i(0, 3, 1)), new BlockOccupancy(new Vector3i(0, 3, 2)), new BlockOccupancy(new Vector3i(0, 4, 0)), new BlockOccupancy(new Vector3i(0, 4, 1)), new BlockOccupancy(new Vector3i(0, 4, 2)), new BlockOccupancy(new Vector3i(1, 0, 0)), new BlockOccupancy(new Vector3i(1, 0, 1)), new BlockOccupancy(new Vector3i(1, 0, 2)), new BlockOccupancy(new Vector3i(1, 1, 0)), new BlockOccupancy(new Vector3i(1, 1, 1)), new BlockOccupancy(new Vector3i(1, 1, 2)), new BlockOccupancy(new Vector3i(1, 2, 0)), new BlockOccupancy(new Vector3i(1, 2, 1)), new BlockOccupancy(new Vector3i(1, 2, 2)), new BlockOccupancy(new Vector3i(1, 3, 0)), new BlockOccupancy(new Vector3i(1, 3, 1)), new BlockOccupancy(new Vector3i(1, 3, 2)), new BlockOccupancy(new Vector3i(1, 4, 0)), new BlockOccupancy(new Vector3i(1, 4, 2)), new BlockOccupancy(new Vector3i(2, 0, 0)), new BlockOccupancy(new Vector3i(2, 0, 1)), new BlockOccupancy(new Vector3i(2, 1, 0)), new BlockOccupancy(new Vector3i(2, 1, 1)), new BlockOccupancy(new Vector3i(2, 1, 2)), new BlockOccupancy(new Vector3i(2, 2, 0)), new BlockOccupancy(new Vector3i(2, 2, 1)), new BlockOccupancy(new Vector3i(2, 2, 2)), new BlockOccupancy(new Vector3i(2, 3, 0)), new BlockOccupancy(new Vector3i(2, 3, 1)), new BlockOccupancy(new Vector3i(2, 3, 2)), new BlockOccupancy(new Vector3i(2, 4, 0)), new BlockOccupancy(new Vector3i(2, 4, 1)), new BlockOccupancy(new Vector3i(2, 4, 2)), });


        }
    }


    [Serialized]
    [LocDisplayName("Electric Blast Furnace")]
    [Ecopedia("Work Stations", "Craft Tables", createAsSubPage: true, display: InPageTooltip.DynamicTooltip)]
    [LiquidProducer(typeof(SmogItem), 1)]
    [AllowPluginModules(Tags = new[] { "AdvancedUpgrade", }, ItemTypes = new[] { typeof(AdvancedSmeltingUpgradeItem),
typeof(SmeltingUpgradeItem), })]
    public partial class NyElectricBlastFurnaceItem :
        WorldObjectItem<NyElectricBlastFurnaceObject>
        , IPersistentData
    {
        public override LocString DisplayDescription => Localizer.DoStr("A superior replacement for the blast furnace that use electric power.");

        static NyElectricBlastFurnaceItem()
        {

        }

        public override DirectionAxisFlags RequiresSurfaceOnSides { get;} = 0 | DirectionAxisFlags.Down;

        public override HomeFurnishingValue HomeValue => homeValue;
        public static readonly HomeFurnishingValue homeValue = new HomeFurnishingValue()
        {
            Category                 = RoomCategory.Industrial,
            TypeForRoomLimit         = Localizer.DoStr(""),
        };

        [Tooltip(7)] private LocString PowerConsumptionTooltip => Localizer.Do($"Consumes: {Text.Info(3000)}w of {new ElectricPower().Name} power");

        [Serialized, TooltipChildren] public object PersistentData { get; set; }
    }

    [RequiresSkill(typeof(IndustrySkill), 1)]
    public class NyElectricBlastFurnaceRecipe :
        RecipeFamily
    {
        public NyElectricBlastFurnaceRecipe()
        {
            var product = new Recipe(
                "Electric Blast Furnace",
                Localizer.DoStr("Electric Blast Furnace"),
                new IngredientElement[]
                {
                    new IngredientElement(typeof(BasicCircuitItem), 24, typeof(IndustrySkill)),
                    new IngredientElement(typeof(ReinforcedConcreteItem), 16, typeof(IndustrySkill)),
                    new IngredientElement(typeof(SteelPlateItem), 24, typeof(IndustrySkill)),
                    new IngredientElement(typeof(SteelPipeItem), 16, typeof(IndustrySkill)),
                },
                new CraftingElement<NyElectricBlastFurnaceItem>()
            );
            this.Recipes = new List<Recipe> { product };
            this.ExperienceOnCraft = 20;
            this.LaborInCalories = CreateLaborInCaloriesValue(1000, typeof(IndustrySkill));
            this.CraftMinutes = CreateCraftTimeValue(typeof(NyElectricBlastFurnaceRecipe), 25, typeof(IndustrySkill));
            this.Initialize(Localizer.DoStr("Electric Blast Furnace"), typeof(NyElectricBlastFurnaceRecipe));
            CraftingComponent.AddRecipe(typeof(AssemblyLineObject), this);
        }
    }

    [RequiresSkill(typeof(AdvancedSmeltingSkill), 1)]
    public partial class AdvancedSteelPipeRecipe :
        RecipeFamily
    {
        public AdvancedSteelPipeRecipe()
        {
            this.Recipes = new List<Recipe>
            {
                new Recipe(
                    "SteelPipe",
                    Localizer.DoStr("Steel Pipe"),
                    new IngredientElement[]
                    {
                    new IngredientElement(typeof(SteelBarItem), 2, typeof(AdvancedSmeltingSkill), typeof(AdvancedSmeltingLavishResourcesTalent)),
                    },
                    new CraftingElement[]
                    {
                    new CraftingElement<SteelPipeItem>(),
                    }
                )
            };
            this.LaborInCalories = CreateLaborInCaloriesValue(100, typeof(AdvancedSmeltingSkill));
            this.ExperienceOnCraft = 0.5f;
            this.CraftMinutes = CreateCraftTimeValue(typeof(SteelPipeRecipe), 1.5f, typeof(AdvancedSmeltingSkill), typeof(AdvancedSmeltingFocusedSpeedTalent), typeof(AdvancedSmeltingParallelSpeedTalent));
            this.Initialize(Localizer.DoStr("Steel Pipe"), typeof(SteelPipeRecipe));

            CraftingComponent.AddRecipe(typeof(NyElectricBlastFurnaceObject), this);
        }
    }
}

/**
 * Add existing recipes to the NyElectricBlastFurnaceObject
**/
namespace Eco.Mods.TechTree
{
    public partial class CopperBarRecipe : RecipeFamily
    {
        partial void ModsPostInitialize() {
            CraftingComponent.AddRecipe(typeof(NyElectrics.NyElectricBlastFurnaceObject), this);
        }
    }

    public partial class GoldBarRecipe : RecipeFamily
    {
        partial void ModsPostInitialize() {
            CraftingComponent.AddRecipe(typeof(NyElectrics.NyElectricBlastFurnaceObject), this);
        }
    }

    public partial class IronBarRecipe : RecipeFamily
    {
        partial void ModsPostInitialize() {
            CraftingComponent.AddRecipe(typeof(NyElectrics.NyElectricBlastFurnaceObject), this);
        }
    }

    public partial class SteelBarRecipe : RecipeFamily
    {
        partial void ModsPostInitialize() {
            CraftingComponent.AddRecipe(typeof(NyElectrics.NyElectricBlastFurnaceObject), this);
        }
    }

    public partial class SteelPipeRecipe : RecipeFamily
    {
        partial void ModsPostInitialize() {
            CraftingComponent.AddRecipe(typeof(NyElectrics.NyElectricBlastFurnaceObject), this);
        }
    }

    public partial class QuicklimeRecipe : RecipeFamily
    {
        partial void ModsPostInitialize() {
            CraftingComponent.AddRecipe(typeof(NyElectrics.NyElectricBlastFurnaceObject), this);
        }
    }

    public partial class RebarRecipe : RecipeFamily
    {
        partial void ModsPostInitialize() {
            CraftingComponent.AddRecipe(typeof(NyElectrics.NyElectricBlastFurnaceObject), this);
        }
    }

    public partial class RivetRecipe : RecipeFamily
    {
        partial void ModsPostInitialize() {
            CraftingComponent.AddRecipe(typeof(NyElectrics.NyElectricBlastFurnaceObject), this);
        }
    }
    
    public partial class AdvancedSmeltingUpgradeRecipe : RecipeFamily
    {
        partial void ModsPostInitialize() {
            CraftingComponent.AddRecipe(typeof(NyElectrics.NyElectricBlastFurnaceObject), this);
        }
    }
    
    public partial class ModernUpgradeLvl1Recipe : RecipeFamily
    {
        partial void ModsPostInitialize() {
            CraftingComponent.AddRecipe(typeof(NyElectrics.NyElectricBlastFurnaceObject), this);
        }
    }
}
